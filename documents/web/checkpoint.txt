Checkpoint
==========

Checkpoint helps refine static analysis by bringing external event ordering
information into static analysis.  This work is used to drive the Lighthouse
analysis.


Motivation
----------

An embedded sensor node often reacts to external events.  Example events
include environmental conditions causing a sensor to pass a threshold, radio
messages arrival, or on board timer firings.  These events trigger action on
the underlying sensor node.  Static analysis without additional information
must assume all (possible) event orderings.  This leads to false positives
resulting from statically examining event orderings that a programmer may know
should not occur in a deployed system.  

The following specification is proposed to help programmers describe
valid event orderings.  Event specifications can be used to constrain static
analysis, embed run time checks into source code, and document a project.


Graph Specification
-------------------


Definition of Graph
~~~~~~~~~~~~~~~~~~~

Graph := \'digraph\' [ID] \'{\' [Node_list] [Edge_list] \'}\'

Node_list := Node\';\' [Node_list]

Node := Node_id [Store_list]

Node_id := ID

Store_list := Global_id \'=\' Store_state\';\' [Store_list]

Global_id := ID

Store_state := (\'Full_Store\' | \'Empty_Store\' | \'Protected_Store\')

Edges := Node_id \'->\' Node_id \'[\' Event_id [\',\' \'pre=" \' Predicates
\'" \'] [\',\' \'post=" \' Predicates\' "\'] \']\'

Event_id := ID

Formal_Predicates := Formal_id\'.\'(full | mpty)\'();\'

Formal_id := ID


Notes
~~~~~

- Unnamed stores are assumed to be have state Protected_Store.
- Deviations from the FSM transition to an implicit Error state.
- Lack of pre- or post- conditions on an edge imply that the formal can not
  change during event execution.


Examples
--------

[c,numbered]
^^^^^^^^
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

const int NULL = 0;
const int stderr = 1;

enum {
    INIT = 0,
    FINAL = 1,
    CREATE = 2,
    DESTROY = 3,
};


char *state;

void init();
void final();
void create();
void destroy();

int main() {

    int seed;
    seed = time(NULL);
    printf("Using seed: %d\n", seed);
    srandom(seed);

    state = NULL;

    for (;;) {
    
        switch (random() % 4) {

            case INIT: 
                init();
                break;

            case FINAL:
                final();
                return 0;
                break;


            case CREATE:
                create();
                break;

            case DESTROY:
                destroy();
                break;

            default:
                fprintf(stderr, "Oops.\n");
                return -1;
        }
    }

    return -1;
}


void init() {
    printf("Init\n");
    return;
}


void final() {
    printf("Final\n");
    return;
}


void create() {
    printf("Create\n");
    state = (char *) malloc(100 * sizeof(char));
    return;
}


void destroy() {
    printf("Destroy\n");
    free(state);
    return;
}
^^^^^^^^

The above program provides a naive view of event driven systems.  Events fire
randomly.  This is unfortunate since calling the `create` event twice in a row
causes a memory leak.  This is only one of many potential problems with this
program.  However, if the program can guarantee a fixed ordering of the events
called (rather than the random ordering seen here) the program would be sound.
The following is a specification that describes such a valid event ordering.  

Running Lighthouse on the memory program listed above causes the following
errors:

----
./rocket --spec test.spec ../fsm/memory.c --strict

...

Error: State.verify_state_with_pre: malloc is not free to store heap data at
memory.c:78

Error: State.verify_state_with_pre: state is dead so it may not be
dereferenced at memory.c:85

...

Error: State.verify_state_with_pre: Formal parameter $1 is not a full store
and not heap data at memory.c:85

----

If the static analysis understood event orderings and pre- and post-
conditions for formals passed into event handlers, this would not be a
problem.  An example of such an FSM specification is:

----
digraph memory {

    Start;
    Init_done;
    Final_done;
    Create_done [state=Full_Store];
    Destroy_done [state=Empty_Store];

    Start -> Init_done [event=init];
    Init_done -> Final_done [event=final];
    Init_done -> Create_done [event=create];
    Create_done -> Destroy_done [event=destroy];
    Destroy_done -> Create_done [event=create];
    Destroy_done -> Final_done [event=final];

}
----

Updating 'rocket' to take as input a FSM description to drive the analysis
results in:

----
./rocket --spec test.spec ../fsm/memory.c --fsm ../fsm/memory.dot

NOT WORKING :-(
----

This time the analysis only examines functions that label FSM edges and uses
the pre- and post- conditions from the edge.  This helps to clarify the
behavior of the programmer is expecting.


Longer Example
--------------

The same argument applies to SOS.  The following code listing is a heavily
modified SOS sensor driver.  Parts of the program have been broken out into
dedicated functions to ease the specification process.


[c,numbered]
^^^^^^^^
// function registered with kernel sensor component
static char accel_control(func_cb_ptr cb, unsigned char cmd, void* data) {

    unsigned char ctx = *(unsigned char*)data;

    switch (cmd) {
        case SENSOR_GET_DATA_CMD:
            return sensor_get_data_cmd(ctx);
            break;

        case SENSOR_ENABLE_CMD:
            sensor_endable_cmd();
            break;

        case SENSOR_DISABLE_CMD:
            sensor_disable_cmd();
            break;

        case SENSOR_CONFIG_CMD:
            sensor_config_cmd(data);
            break;

        default:
            return -EINVAL;
    }
    return SOS_OK;
}


// message handler called by kernel
char accel_msg_handler(void *state, Message *msg) {

    accel_sensor_state_t *s = (accel_sensor_state_t*)state;

    switch (msg->type) {

        case MSG_INIT:
            msg_init(s);
            break;
            
        case MSG_FINAL:
            msg_final();
            break;

        default:
            return -EINVAL;
    }
    return SOS_OK;
}



void msg_init(accel_sensor_state_t *s) {

    // bind adc channel and register callback pointer
    ker_adc_proc_bindPort(MTS310_ACCEL_0_SID, MTS310_ACCEL_0_HW_CH, ACCEL_SENSOR_PID,  SENSOR_DATA_READY_FID);
    ker_adc_proc_bindPort(MTS310_ACCEL_1_SID, MTS310_ACCEL_1_HW_CH, ACCEL_SENSOR_PID,  SENSOR_DATA_READY_FID);

    // register with kernel sensor interface
    s->accel_0_state = ACCEL_0_SENSOR_ID;
    ker_sensor_register(ACCEL_SENSOR_PID, MTS310_ACCEL_0_SID, SENSOR_CONTROL_FID, (void*)(&s->accel_0_state));
    s->accel_1_state = ACCEL_1_SENSOR_ID;
    ker_sensor_register(ACCEL_SENSOR_PID, MTS310_ACCEL_1_SID, SENSOR_CONTROL_FID, (void*)(&s->accel_1_state));
    return;
}


void msg_final() {

    // shutdown sensor
    accel_off();

    //  unregister ADC port
    ker_adc_proc_unbindPort(ACCEL_SENSOR_PID, MTS310_ACCEL_0_SID);
    ker_adc_proc_unbindPort(ACCEL_SENSOR_PID, MTS310_ACCEL_1_SID);

    // unregister sensor
    ker_sensor_deregister(ACCEL_SENSOR_PID, MTS310_ACCEL_0_SID);
    ker_sensor_deregister(ACCEL_SENSOR_PID, MTS310_ACCEL_1_SID);
    return;
}


void sensor_data_ready_fid() {};

void sensor_control_fid() {};

char sensor_get_data_cmd(unsigned char ctx) {

    // get ready to read accel sensor
    if ((ctx & 0xC0) == ACCEL_0_SENSOR_ID) {
        return ker_adc_proc_getData(MTS310_ACCEL_0_SID, ACCEL_0_SENSOR_ID);
    } else {
        return ker_adc_proc_getData(MTS310_ACCEL_1_SID, ACCEL_1_SENSOR_ID);
    }
}


void sensor_endable_cmd() {
    accel_on();
    return;
}


void sensor_disable_cmd() {
    accel_off();
    return;
}

void sensor_config_cmd(unsigned char *data) {
    sys_free(data);
    return;
}
^^^^^^^^

The corresponding FSM looks like:

----
digraph sensor {

    Start;
    Init_done;
    Final_done;
    Enable_done;
    Get_Data_done;


    Start -> Init_done [event=msg_init];
    Init_done -> Init_done [event=sensor_config_cmd, pre="$1.full();", post="1.mpty();"];
    Init_done -> Final_done [event=msg_final];
    Init_done -> Enable_done [event=sensor_enable_cmd];
    Enable_done -> Enable_done [event=sensor_config_cmd, pre="$1.full();", post="1.mpty();"];
    Enable_done -> Init_done [event=sensor_disable_cmd];
    Enable_done -> Get_Data_done [event=sensor_get_data_cmd];
    Get_Data_done -> Enable_done [event=sensor_data_ready_fid];

}
----


So far everything is still going well.  But problems arise as soon as we begin
using the actual C program that the user provided.  Looking at the unmodified
SOS driver:


Flow Predicates?
----------------

The above example presents a stylized SOS module that has been restructured
to have each event handler in a unique function.  An interesting side point
is considering how to handle standard SOS modules that do not break all
event handlers out into unique functions.  Take for example the blink
application:

[c,numbered]
^^^^^^^^
static int8_t blink_msg_handler(void *state, Message *msg) {
  
    app_state_t *s = (app_state_t*)state;

    switch (msg->type) {

        case MSG_INIT:
        {
	        s->pid = msg->did;
	        s->state = 0;
	        sys_led(LED_RED_TOGGLE);
	        DEBUG("Blink Start\n");
	        sys_timer_start(BLINK_TID, BLINK_TIMER_INTERVAL, TIMER_REPEAT);
	        break;
	    }

        case MSG_FINAL:
	    {
	        sys_timer_stop(BLINK_TID);
	        DEBUG("Blink Stop\n");
	        break;
	    }

        case MSG_TIMER_TIMEOUT:
	    {
	        sys_led(LED_GREEN_TOGGLE);
	        break;
	    }

	    default:
	        return -EINVAL;
    }

  return SOS_OK;
}
^^^^^^^^

A specification for this code should distinguish between flows through each
different case statement.  One way to express this in the specification is
to include flow predicates on edges between nodes.  The FSM specification
for this module may look a bit like:

----
digraph blink {
    
    Start;
    Init_done;
    Final_done;
    Timeout_done;

    Start -> Init_done [event=blink_msg_handler, pred="msg->type=MSG_INIT"];
    Init_done -> Final_done [event=blink_msg_handler, pred="msg-type=MSG_FINAL"];
    Init_done -> Timeout_done [event=blink_msg_handler, pred="msg-type=MSG_TIMER_TIMEOUT"];
    Timeout_done -> Timeout_done [event=blink_msg_handler, pred="msg-type=MSG_TIMER_TIMEOUT"];
    Timeout_done -> Final_done [event=blink_msg_handler, pred="msg-type=MSG_FINAL"];

}
----

