Lighthouse Resource Verification
================================

Many embedded systems expose interfaces for dynamic creation and
manipulation of system resources.  While these interfaces greatly aid simple
and efficient application design, they also introduce more opportunities for
programmers to mismanage resources.  

Lighthouse is a static analysis that attempts to locate memory resource
misuses within source files.  The analysis is written using the
http://hal.cs.berkeley.edu/cil/[CIL] infrastructure for analysis of C
programs.  The analysis implements a dataflow analysis that tracks where
heap data is store.  The analysis alerts users to common dynamic memory
errors within their code.  The current implementation of Lighthouse uses a
configuration file to describe pre- and post- assumptions that describe how
functions manipulate heap memory.


Building Lighthouse
-------------------

Install CIL
~~~~~~~~~~~

Lighthouse sits upon CIL.  The first step is to install CIL on your
computer.  The CIL website has good instructions on how to
http://hal.cs.berkeley.edu/cil/[install CIL].  Lighthouse is currently
developed using CIL version 1.3.5.

Obtain Lighthouse
~~~~~~~~~~~~~~~~~

Lighthouse is available for download via anonymous
http://subversion.tigris.org/[SVN] access.  To download the lighthouse
source file into a directory named `lighthouse` use the following command:

----
svn co svn://projects.nesl.ucla.edu/lighthouse/trunk/src/memCheck lighthouse
----

Build Lighthouse 
~~~~~~~~~~~~~~~~

Lighthouse is built using the `build.sh` script included in the source
distribution.  The `CIL_ROOT` and `ARCH` variables within the script should
be updated to reflect your installation.  For x86 Linux users, this simply
requires changing `CIL_ROOT` to point to the base of your CIL installation.
The script can then be executed to build the `lighthouse` binary.


Running Lighthouse
------------------

Lighthouse is run using the following command:

----
./lighthouse --config config.txt --spec test.spec <file>
----

where file is the program that you wish to verify.  The `config.txt` is a
soon to be obsolete file that describes functions that allocate or free data
and is used by the must alias analysis to determine which functions
introduce and remove heap data.  The `test.spec` file contains pre- and
post- condition specifications for the program you are verifying.  It
already contains pre- and post- specifications for the SOS operating system.


Adding Program Specific Pre- and Post- Conditions To Analysis
-------------------------------------------------------------

Program specific specifications can be added to the analysis by updating the
`test.spec` file.  Specifications for a function of name `foo` take the form:

----
foo.pre {
    condition;
    condition;
    ...
}

foo.post {
    condition;
    condition;
    ...
}
----

Each `condition` statement begins with either the name of a global store, a
formal, or the return value.  Global stores are referred to by name
and the name must be added to the special `stores` entry at the top of the
specification file.  Formals are referred to using a `$` with the index of
the formal, where the first formal passed into a function as index one.  The
return value is specified using `$return`.  Thus, the standard C `malloc`
and `free` functions take on the form:

NOTE: The specifications use `mpty` and _not_ the word `empty` to denote an
empty store.

----
malloc.pre {}

malloc.post {
    $return.full();
}

free.pre {
    $1.full();
}

free.post {
    $1.mpty();
}
----


