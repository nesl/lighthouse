Making Life a Little Easier or... 
=================================

Compile Time Checking of Run Time Resource Management
=====================================================


Title
-----
- Roy Shea
- Shane  , Todd, Rupak, Mani


Introduction
------------

Problem
~~~~~~~
- Resources usage on sensor nodes
- Example resources
-- A an item of limited quantity
-- Often tied to hardware including memory, buses, sensors
--- <images of mems sensor hardware>
- Compile time vs run time
-- <prompt for benefits and draw backs of each of these times>

Resource Examples
~~~~~~~~~~~~~~~~~
- Current Examples
-- Buffer pools in TinyOS apps (such as VanGo)
--- <image showing buffer usage>
-- Pointer Swapping in SOS
--- <block of sample code with error>
-- Thread creation in Mantis OS
-- Memory in SOS
- Emerging resource management 
-- Access to hardware busses
--- <schematic of multiplexed hardware busses on TMote>
-- Access to physical sensors


Model Formulation
-----------------

Concrete Example (API)
~~~~~~~~~~~~~~~~~~~~~~
- SOS memory API and justification
-- malloc
-- free
-- post + RELEASE
-- <colored box with API>

Concrete Example (Surge Overview)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Simple sense and send
- Sensor data comes in
- Passed on to tree routing module
- At sink this is passed up to application
- <image of senors nodes in routing tree>

Surge Code
~~~~~~~~~~
- <highlight memory usage in this code>
- <discuss the intuitive model>

Intuitive Model (Laptops)
~~~~~~~~~~~~~~~~~~~~~~~~~
- Limited number of laptops for too many students
- Problems
-- I accidental grab a laptop that a lab mate is using (illegal pointer reference)
--- <laptop image?>
-- Someone forgets to return a laptop (leak)
-- We both think the other person is responsible for the laptop (leak)
--- <laptop image?>
- Basic rules
-- Each laptop should have one owner at a time
-- Each laptop owner must track, return, give to some one else
-- <3 images for these good actions>

Intuitive Model (Memory)
~~~~~~~~~~~~~~~~~~~~~~~~
- Memory owned by exactly one process
- Only owner can manipulate memory
- Responsibilities of a memory owner to free, store, release
-- <use small images to tie these back to laptop model>

Formal Model
~~~~~~~~~~~~
- Review linear temporal logic
-- Boolean expressions
-- Temporal operators
--- \square Holds at S if it holds for S and each subsequent state (all)
--- \diamond Holds at S if it holds for S or some subsequent state
--- \circle Holds if it holds for successor along path (after this state)
- Property 1: XXX
-- <prompt for interpretation>
-- <fill in leaks explanation>
- Property 2: XXX
-- <prompt for interpretation>
-- <fill in no dangling pointers explanation>


Evaluation
----------

Implementation
~~~~~~~~~~~~~~
- OCaml + CIL
- Dataflow
-- <example or explanation?>
- Must Analysis 
-- Tied back to STORE property
- May Analysis
-- Tied back to RELEASE property

Annotations
~~~~~~~~~~~
- STORE (sos_claim, sos_store)
-- <sample code>
- RELEASE (sos_release, sos_may_release)
-- <sample code>
- need not be stored in the code base

Output
~~~~~~
- Dangling pointers
-- <sample code>
-- <sample warning>
-- <laptop image>
- Access to dead data in loop
-- <sample code>
-- <sample warning>
-- <laptop image>
-- Note that this is probably a false positive
- Memory leak
-- <sample code>
-- <sample warning>
-- <laptop image>

Memory Usage in SOS
~~~~~~~~~~~~~~~~~~~
- Lines of code
-- 46371 SLOC with one in 100 having base memory operation
-- 12990 SLOC with one in 60 having base memory operation
- Anecdotal evidence
-- New users have problems with dynamic memory (class and mailing list)
-- Think intro CS class all over again!

End User Modules Background
~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Application components similar to "components" in TinyOS
- April CVS head includes 37 modules
-- A few simple applications
-- A lot of test drivers
-- Total of 203 historic versions in CVS
-- Checked them all!  Very neat time series look at errors
- Used a base set of 20 attribute annotations

End User Modules Results
~~~~~~~~~~~~~~~~~~~~~~~~
- 307 warnings generated by 77 versions
-- 16 leaks
-- 153 missing annotations
-- 66 free in loop
-- 72 false positives
-- <data in table with color>

Causes of False Positives
~~~~~~~~~~~~~~~~~~~~~~~~~
- missing annotations
- free in loops
- other notables
-- complex data structures
- assumption that store is always valid (to reduce false positives)

Example Bug: Memory Leak in Module Loader (Code 1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- <prompt for bug>
- <highlight error>

Example Bug: Memory Leak in Module Loader Discussion
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Date and version
- Why this is a bug
- <prompt for solution>
- Generated warning

Example Bug: Memory Leak in Module Loader (Code 2)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Highlight error
- Include function calls
- Date and version

Example Bug: Memory Leak in Module Loader (Code 3)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Highlight function annotations
- Highlight fixes
- Date and version
- CVS entries

Current SOS Kernel
~~~~~~~~~~~~~~~~~~
- 37 c files
- 43 warnings from 16 files
-- 1 memory leak
-- 1 dangling pointer
-- 10 missing annotations
-- 5 frees in loops
-- 26 false positives
-- <above in table with color>

Example Bug: Dangling Pointer Reference
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Code block
-- <prompt for bug>
- Why this does not cause a problem today
- Why this is still bad
-- System may become preemptive
-- Indicative of other memory problems


Winding Down
------------

Related Works
~~~~~~~~~~~~~
- Sensor network static checking
-- TinyOS static concurrency testing
-- galsC extensions to TinyOS
- General reliability
-- Components, composition, aggregation
- Programing languages
-- Ownership types
-- Confinement
-- Linear pointers
- <trim down the above to one summary slide + one cite slide>

Future Work
~~~~~~~~~~~
- Model verification
-- <prompt for example of this>
- Formal type system
- Link time verification

Conclusions
~~~~~~~~~~~
- "Informal" verification
-- Easing formal verification techniques to apply to real systems
-- Can get substantial, but non perfect, gains today
- Provide early feedback
- Provide clear and constructive feedback
-- Warning statement with problem and line number
-- (or) Node reboots


Extra Material
--------------

Property 3
~~~~~~~~~~
- Missing link...


