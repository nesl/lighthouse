////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

Summary of Memory Usage in SOS:
-------------------------------

ker_malloc: 603

blk_mem_alloc: 6

ker_free: 372

blk_mem_free: 6

post_long: 958   

post_link: 284    

post_auto: 76    

post_net: 620    

post_uart: 182    

post_i2c: 91    

post_spi: 87    

ker_msg_take_data: 608    

msg_duplicate: 0       

msg_create: 0       

handle_incoming_msg: 0       

sched_msg_alloc: 10      

mq_enqueue: 0       

ker_cam_add: 0       

msg_dispatch: 0       

pop_new_mod_op: 0       

ker_change_own: 368    

sys_msg_take_data: 139    

fetcher_restart: 30     

sos_msg_dispatch: 0       

total: 4440

dft_loader
----------

////////////////////////////////////////
////////////////////////////////////////

2006_02_25_06_29_55
~~~~~~~~~~~~~~~~~~~

Dead (256)
^^^^^^^^^^
----
ker_free(st.version_data);
st.version_data - (msg_version_data_t*) ker_msg_take_data(KER_DFT_LOADER_PID, msg);
----

*BUG*: May alias causing problems?  In genereal it should be okay to stare
into a dead variable.  But may alias expansion may cause problems for this.


Store (257)
^^^^^^^^^^^

----
st.version_data - (msg_version_data_t*) ker_msg_take_data(KER_DFT_LOADER_PID, msg);
----

*BUG*: Save into the static state variable `st` should not be a problem.  


Store (330)
^^^^^^^^^^^

----
st.version_data - ker_malloc(sizeof(msg_version_data_t), KER_DFT_LOADER_PID);
----

*BUG*: Same as above.  Save into the static state variable `st` should not be a problem.  


////////////////////////////////////////
////////////////////////////////////////

2006_01_24_04_14_00
~~~~~~~~~~~~~~~~~~~

Store (52)
^^^^^^^^^^

----
fetcher_state_t *f - (fetcher_state_t*) ker_msg_take_data(KER_DFT_LOADER_PID, msg);
if(is_fetcher_succeed(f)) {
    ...
    fetcher_commit(f, true);
    return SOS_OK;
} else {
    ...
    fetcher_restart(f, BCAST_ADDRESS);
    return SOS_OK;
}
----

*MISSING*: Assuming that `fetcher_commit` and `fetcher_restart` should be annotated. 


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

digital_adc
-----------

////////////////////////////////////////
////////////////////////////////////////

2006_07_18_20_36_12
~~~~~~~~~~~~~~~~~~~

Store (121)
^^^^^^^^^^^

----
case ADS_POWER_ON:
    {
        uint8_t* power_mask - ker_msg_take_data(ADS7828_ID, msg);
        HAS_CRITICAL_SECTION;
        ENTER_CRITICAL_SECTION();
        ADS7828_DIRECTION - ADS7828_DIRECTION | *power_mask;
        ADS7828_PORT - ADS7828_PORT | *power_mask;
        LEAVE_CRITICAL_SECTION();
        break;
    }
----

*HIT*

Store (159)
^^^^^^^^^^^

----
// Send a request to configure ADC for a read from CH0
s->command - (uint8_t *)ker_malloc(1, ADS7828_ID);
----

*BUG*: This is stored into the local store created by the module state passed
into this function.  Adding in the missing annotation should clean this up.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

echo
----

////////////////////////////////////////
////////////////////////////////////////

2006_03_20_21_07_13
~~~~~~~~~~~~~~~~~~~

Store (59)
^^^^^^^^^^

----
uint8_t *d - ker_msg_take_data(s->pid, msg);
post_auto(msg->sid, s->pid, MSG_ECHO, l, d, SOS_MSG_RELEASE, msg->saddr);	
return SOS_OK;
----

*BUG*: Not sure why this was not caught.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

echo_uart
---------

////////////////////////////////////////
////////////////////////////////////////

2006_01_24_04_14_00
~~~~~~~~~~~~~~~~~~~

Store (66)
^^^^^^^^^^

----
buff_to_send - (uint8_t*)ker_msg_take_data(s->pid, msg);
if (buff_to_send !- NULL) {
    LED_DBG(LED_GREEN_TOGGLE);
    post_net(DFLT_APP_ID0, DFLT_APP_ID0, MSG_MOTE_TO_PC, msg_len, 
            (void*)buff_to_send, SOS_MSG_RELEASE, UART_ADDRESS);
}
----

*BUG*: Not sure why this was not caught.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

flooding
--------

////////////////////////////////////////
////////////////////////////////////////

2006_05_12_23_07_43
~~~~~~~~~~~~~~~~~~~

Store (83)
^^^^^^^^^^

----
dupbuff - ker_malloc(msg->len, MOD_FLOODING_PID);
if (dupbuff -- NULL) return SOS_OK; // Out of memory
for (i - 0; i < msg->len; i++) {
    dupbuff[i] - msg->data[i];
}
post_long(hdr->dst_pid, MOD_FLOODING_PID, hdr->dest_msg_type, msg->len, dupbuff, SOS_MSG_RELEASE);
----

*BUG*: Not sure why this was not caught.

Store (93)
^^^^^^^^^^

----
hdr - (flood_hdr_t*)ker_msg_take_data(MOD_FLOODING_PID, msg);
if(hdr -- NULL) return -ENOMEM;
post_net(MOD_FLOODING_PID, MOD_FLOODING_PID, MSG_FLOOD_DATA_PKT, l, hdr, SOS_MSG_RELEASE, BCAST_ADDRESS);
----

*BUG*: Not sure why this was not caught.

Store (168)
^^^^^^^^^^^

----
ker_change_own(pktpayload, MOD_FLOODING_PID);
return post_net(MOD_FLOODING_PID, MOD_FLOODING_PID, MSG_FLOOD_DATA_PKT, payloadlen, pktpayload, SOS_MSG_RELEASE, BCAST_ADDRESS);
----

*BUG*: Not sure why this was not caught.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

i2c_comm_ping_pong
------------------

////////////////////////////////////////
////////////////////////////////////////

2006_02_22_18_20_12
~~~~~~~~~~~~~~~~~~~

Store (114)
^^^^^^^^^^^

----
if ((s->sos_i2c_data - ker_malloc(s->msg_len,s->pid)) !- NULL) {
    ...
}
----

*BUG*: This is stored into the local store created by the module state passed
into this function.  Adding in the missing annotation should clean this up.

Dead (121)
^^^^^^^^^^

----
case MSG_TIMER_TIMEOUT:
...
if(s->state -- T_I2C_COMM_IDLE) {
    if ((s->sos_i2c_data - ker_malloc(s->msg_len,s->pid)) !- NULL) {
        ...
        post_link(DFLT_APP_ID0,
                DFLT_APP_ID0,
                MSG_COMM_TEST,
                s->msg_len,
                s->sos_i2c_data,
                (SOS_MSG_RELEASE | SOS_MSG_I2C_IO | SOS_MSG_RELIABLE),
                BCAST_ADDRESS);
    } else {
        ...
    }
    s->state - T_I2C_COMM_SEND_SOS_I2C_MSG;
} else {
    ...
}
----

*BUG*: I am guessing a may alias bug.


////////////////////////////////////////
////////////////////////////////////////

2006_02_20_00_18_43
~~~~~~~~~~~~~~~~~~~

Store (121)
^^^^^^^^^^^

----
if ((s->sos_i2c_msg->data - ker_malloc(s->msg_len,s->pid)) !- NULL) {
    ...
}
----

*BUG*: This is stored into the local store created by the module state passed
into this function.  Adding in the missing annotation should clean this up.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

i2c_comm_tx
-----------

////////////////////////////////////////
////////////////////////////////////////

2006_02_20_00_18_43
~~~~~~~~~~~~~~~~~~~

Store (127)
^^^^^^^^^^^

----					
if ((s->sos_i2c_msg - ker_malloc(sizeof(Message), s->pid)) !- NULL) {
    ...   
}
----

*BUG*: This is stored into the local store created by the module state passed
into this function.  Adding in the missing annotation should clean this up.


Store (134)
^^^^^^^^^^^

----
if ((s->sos_i2c_msg->data - ker_malloc(s->msg_len,s->pid)) !- NULL) {
    ...
}
----

*BUG*: This is stored into the local store created by the module state passed
into this function.  Adding in the missing annotation should clean this up.

Dead (145)
^^^^^^^^^^

----
if (...) {
    if (...) {
        ker_free(s->sos_i2c_msg);
    }
} else {
    ...
}
s->state - T_I2C_COMM_SEND_SOS_I2C_MSG;
----

*BUG*: May alias is probably causing problems.


Dead (191)
^^^^^^^^^^

----
case MSG_I2C_SEND_DONE:
{
    ker_free(msg->data);
    ker_i2c_release_bus(s->pid);
    if (s->state -- T_I2C_COMM_SEND_RAW) {
        s->state - T_I2C_COMM_SEND_RAW_DONE;
    } else {
        s->state - T_I2C_COMM_SEND_SOS_MSG_DONE;
    }
    break;
}
----

*BUG*: This one is a real mystery.  I think it may require diving into the
`.i` file to understand.

Dead (254)
^^^^^^^^^^

----
case MSG_ERROR:
{
    LED_DBG(LED_GREEN_OFF);
    LED_DBG(LED_YELLOW_ON);

    ker_free(msg->data);
    ker_i2c_release_bus(s->pid);
    break;
}
----

*BUG*: This one is a real mystery.  I think it may require diving into the
`.i` file to understand.  Note that it is the same as the problem emmediatly
above.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

mag_sensor
----------

////////////////////////////////////////
////////////////////////////////////////


2006_08_30_23_09_58
~~~~~~~~~~~~~~~~~~~

Store (94)
^^^^^^^^^^

----
s->i2c_data_ptr - ker_malloc(sizeof(uint16_t), MAG_SENSOR_PID);
----

*BUG*: This is stored into the local store created by the module state into
the local store resulting from a call to `ker_get_module_state`.  Should add
feature to deal with this type of "dynamic call generation".

Store (191)
^^^^^^^^^^^

----
(s->i2c_data_ptr) - ker_malloc(sizeof(uint16_t), MAG_SENSOR_PID);
----

*BUG*: This is stored into the local store created by the module state into
the local store resulting from a call to `ker_get_module_state`.  Should add
feature to deal with this type of "dynamic call generation".


Dead (302)
^^^^^^^^^^

----
ker_free(s->i2c_data_ptr);
ker_i2c_release_bus(MAG_SENSOR_PID);
if(s->callibrate_timeout -- 0) {
    ker_timer_start(MAG_SENSOR_PID, 1, 50);
} else {
    s->callibrate_mode - 0;
}
break;
----

*BUG*: I am guessing a may alias bug.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

mag_test_app
------------

////////////////////////////////////////
////////////////////////////////////////

2006_08_30_23_09_58
~~~~~~~~~~~~~~~~~~~

Store (79)
^^^^^^^^^^

----				
temp - ker_malloc(sizeof(uint8_t), MAG_TEST_PID);
*temp - 0;
ker_sensor_control(s->pid, MTS310_MAG_0_SID, temp);	
s->state - MAG_TEST_APP_IDLE_0;
break;
----

*TODO*: I think that this may be a hit.  I doubt that `ker_sensor_control` is
releasing the buffer.  In fact, I know that in error cases it does not release
the buffer.

Store (88)
^^^^^^^^^^

----
temp - ker_malloc(sizeof(uint8_t), MAG_TEST_PID);
*temp - 1;
ker_sensor_control(s->pid, MTS310_MAG_1_SID, temp); 
s->state - MAG_TEST_APP_IDLE_1;
break;
----

*TODO*: I think that this may be a hit.  I doubt that `ker_sensor_control` is
releasing the buffer.  In fact, I know that in error cases it does not release
the buffer.  Exact same as the above.

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

rats
----

////////////////////////////////////////
////////////////////////////////////////

2006_03_29_19_29_21
~~~~~~~~~~~~~~~~~~~

Store (220)
^^^^^^^^^^^

----					
period_packet_t * period_packet_ptr - ker_malloc(sizeof(period_packet_t), s->pid);
period_packet_ptr->old_period - s->ts_packet.transmission_period;
period_packet_ptr->new_period - s->validation_period;
post_net(s->pid, s->pid, MSG_VALIDATE, sizeof(period_packet_t), period_packet_ptr, SOS_MSG_RELEASE, UART_ADDRESS);	
----

*BUG*: Not sure why this was not caught.


Store (290)
^^^^^^^^^^^

----
period_packet_t * period_packet_ptr - ker_malloc(sizeof(period_packet_t), s->pid);
period_packet_ptr->old_period - s->ts_packet.transmission_period;
period_packet_ptr->new_period - temp_transmission_period;
post_net(s->pid, s->pid, MSG_VALIDATE, sizeof(period_packet_t), period_packet_ptr, SOS_MSG_RELEASE, UART_ADDRESS);	
----

*BUG*: Not sure why this was not caught.


Store (452)
^^^^^^^^^^^

----
s->ts_list - (timesync_t *)ker_malloc(sizeof(timesync_t), s->pid);
----

*BUG*: This is stored into the local store created by the module state passed
into this function.  Adding in the missing annotation should clean this up.


Store (455)
^^^^^^^^^^^

----
s->ts_list->timestamps - (uint32_t *)ker_malloc(BUFFER_SIZE*sizeof(uint32_t), s->pid);
----

*BUG*: This is stored into the local store created by the module state passed
into this function.  Adding in the missing annotation should clean this up.


Store (456)
^^^^^^^^^^^

----
s->ts_list->my_time - (uint32_t *)ker_malloc(BUFFER_SIZE*sizeof(uint32_t), s->pid);
----

*BUG*: This is stored into the local store created by the module state passed
into this function.  Adding in the missing annotation should clean this up.


Store (497)
^^^^^^^^^^^

----
float *buffer - (float *)ker_malloc(8*sizeof(float), s->pid);
...
post_net(s->pid, s->pid, MSG_DEBUG3, 8*sizeof(float), buffer, SOS_MSG_RELEASE, ROOT_NODE);
----

*BUG*: Not sure why this was not caught.


Store (498)
^^^^^^^^^^^

----
float *buffer2 - (float *)ker_malloc(8*sizeof(float), s->pid);
...
post_net(s->pid, s->pid, MSG_DEBUG3, 8*sizeof(float), buffer2, SOS_MSG_RELEASE, ROOT_NODE);
----

*BUG*: Not sure why this was not caught.


Store (576)
^^^^^^^^^^^

----
ts_list_ptr - s->ts_list;
...
ts_list_ptr->next - (timesync_t *)ker_malloc(sizeof(timesync_t), s->pid);
----

*BUG*: This is stored into the local store created by the module state passed
into this function.  Adding in the missing annotation should clean this up.

Store (580)
^^^^^^^^^^^

----
ts_list_ptr - s->ts_list;
...
ts_list_ptr->timestamps - (uint32_t *)ker_malloc(BUFFER_SIZE*sizeof(uint32_t), s->pid);
----

*BUG*: This is stored into the local store created by the module state passed
into this function.  Adding in the missing annotation should clean this up.

Store (581)
^^^^^^^^^^^

----
ts_list_ptr - s->ts_list;
...
ts_list_ptr->my_time - (uint32_t *)ker_malloc(BUFFER_SIZE*sizeof(uint32_t), s->pid);
----

*BUG*: This is stored into the local store created by the module state passed
into this function.  Adding in the missing annotation should clean this up.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

rats_checker
------------

////////////////////////////////////////
////////////////////////////////////////

2006_06_25_00_13_46
~~~~~~~~~~~~~~~~~~~

Store (112)
^^^^^^^^^^^

----
ext_packet_t * ext_packet_ptr - (ext_packet_t *)ker_malloc(sizeof(ext_packet_t), s->pid);
ext_packet_ptr->node_id - ker_id();
ext_packet_ptr->type - TEST_PACKET;
post_net(RATS_TIMESYNC_PID, s->pid, MSG_TIMESTAMP, sizeof(ext_packet_t), ext_packet_ptr, SOS_MSG_RELEASE, BCAST_ADDRESS);
----

*BUG*: Not sure why this was not caught.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

surge
-----

////////////////////////////////////////
////////////////////////////////////////

2006_10_16_03_01_11
~~~~~~~~~~~~~~~~~~~

Store (200)
^^^^^^^^^^^

----
payload - ker_msg_take_data(SURGE_MOD_PID, msg); 
post_uart(SURGE_MOD_PID,
        SURGE_MOD_PID,
        msg->type,
        msg_len,
        payload,
        SOS_MSG_RELEASE,
        BCAST_ADDRESS);
----

*BUG*: Not sure why this was not caught.


////////////////////////////////////////
////////////////////////////////////////

2005_10_12_01_11_00
~~~~~~~~~~~~~~~~~~~

Store (168)
^^^^^^^^^^^

----
pkt - (uint8_t*)ker_malloc(hdr_size + sizeof(SurgeMsg), SURGE_MOD_PID);
if (pkt -- NULL) break; 
...
post_long(TREE_ROUTING_PID, 
        SURGE_MOD_PID, 
        MSG_SEND_PACKET, 
        hdr_size + sizeof(SurgeMsg), 
        (void*)pkt, 
        SOS_MSG_RELEASE);
----

*BUG*: Not sure why this was not caught.


////////////////////////////////////////
////////////////////////////////////////

2005_10_25_20_22_48
~~~~~~~~~~~~~~~~~~~

Store (203)
^^^^^^^^^^^

----
uint8_t *payload - ker_msg_take_data(SURGE_MOD_PID, msg); 
post_net(SURGE_MOD_PID,
        SURGE_MOD_PID,
        msg->type,
        msg->len,
        payload,
        SOS_MSG_RELEASE,
        UART_ADDRESS);
----

*BUG*: Not sure why this was not caught.



////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

test_taosphotosensor
--------------------

////////////////////////////////////////
////////////////////////////////////////

2005_11_17_12_24_15
~~~~~~~~~~~~~~~~~~~

Store (99)
^^^^^^^^^^

----
buff - ker_malloc(sizeof(test_taosphotosensor_t), DFLT_APP_ID0);
if (buff !- NULL){
    ...
    post_net(DFLT_APP_ID0, DFLT_APP_ID0, TAOS_PHOTOSENSOR_DATA,
            sizeof(test_taosphotosensor_t), buff, SOS_MSG_RELEASE, BCAST_ADDRESS);
    ...
}
----

*BUG*: Not sure why this was not caught.


Store (121)
^^^^^^^^^^^

----
buff - ker_malloc(sizeof(test_taosphotosensor_t), DFLT_APP_ID0);
if (buff !- NULL){
    ...
    post_net(DFLT_APP_ID0, DFLT_APP_ID0, TAOS_PHOTOSENSOR_DATA, 
            sizeof(test_taosphotosensor_t), buff, SOS_MSG_RELEASE, BCAST_ADDRESS);
}
----

*BUG*: Not sure why this was not caught.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

test_tpsn
---------

////////////////////////////////////////
////////////////////////////////////////

2006_03_20_10_18_35
~~~~~~~~~~~~~~~~~~~

Store (86)
    ^^^^^^^^^^

    ----
    s->tpsn_ptr - (tpsn_t *)ker_malloc(sizeof(tpsn_t), s->pid);
    ----

    *BUG*: This is stored into the local store created by the module state passed
    into this function.  Adding in the missing annotation should clean this up.


    ////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////

    test_uart_comm_tx
    -----------------

////////////////////////////////////////
////////////////////////////////////////

2006_02_02_05_12_45
~~~~~~~~~~~~~~~~~~~

Store (125)
^^^^^^^^^^^
----
if ((s->sos_uart_msg - ker_malloc(sizeof(Message), s->pid)) !- NULL) {
    ...
}
----

*BUG*: This is stored into the local store created by the module state passed
into this function.  Adding in the missing annotation should clean this up.

Store (131)
^^^^^^^^^^^

----
if ((s->sos_uart_msg->data - ker_malloc(s->msg_len,s->pid)) !- NULL) {
...
}
----

*BUG*: This is stored into the local store created by the module state passed
into this function.  Adding in the missing annotation should clean this up.

Dead (142)
^^^^^^^^^^

----
if (...) {
    if (...) {
        ker_free(s->sos_uart_msg);
    } 
}else {
    ...
}
s->state - T_UART_COMM_SEND_SOS_UART_MSG;
----

*BUG*: I am guessing a may alias bug.

Dead (186)
^^^^^^^^^^
				
----
case MSG_UART_SEND_DONE:
{
    ker_free(msg->data);
    ker_uart_release_bus(s->pid);
    if (s->state -- T_UART_COMM_SEND_RAW) {
        s->state - T_UART_COMM_SEND_RAW_DONE;
    } else {
        s->state - T_UART_COMM_SEND_SOS_MSG_DONE;
    }
    break;
}
----

*BUG*: This one is a real mystery.  I think it may require diving into the
`.i` file to understand.

Dead (201)
^^^^^^^^^^

----
case MSG_ERROR:
{
    LED_DBG(LED_GREEN_OFF);
    LED_DBG(LED_YELLOW_ON);

    ker_free(msg->data);
    ker_uart_release_bus(s->pid);
    break;
}
----

*BUG*: This one is a real mystery.  I think it may require diving into the
`.i` file to understand.

###
# Check new tree routing
###

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

tree_routing
------------

////////////////////////////////////////
////////////////////////////////////////

2006_10_14_00_34_59
~~~~~~~~~~~~~~~~~~~

Store (216)
^^^^^^^^^^^

----
tr_hdr_t *hdr - (tr_hdr_t*) ker_msg_take_data(TREE_ROUTING_PID, msg);
if(hdr -- NULL) return -ENOMEM;
...
post_long(hdr->dst_pid, TREE_ROUTING_PID, 
        MSG_TR_DATA_PKT, msg_len, hdr,  
        SOS_MSG_RELEASE);
return SOS_OK;
----

*BUG*: Not sure why this was not caught.

////////////////////////////////////////
////////////////////////////////////////

2005_09_06_19_14_28
~~~~~~~~~~~~~~~~~~~

Store (149)
^^^^^^^^^^^

----
neighbor_entry_t *nb - (neighbor_entry_t*) ker_malloc(sizeof(neighbor_entry_t),TREE_ROUTING_PID);
if(nb !- NULL) {
    ...
    s->gpCurrentParent - nb;      
    ...
} else {
    ...
}
----

*BUG*: Not sure why this was not caught.

Store (411)
^^^^^^^^^^^

----
nb - (neighbor_entry_t*) ker_malloc(sizeof(neighbor_entry_t), TREE_ROUTING_PID);
if(nb -- NULL) return NULL;
init_nb(nb, saddr);
nb->next - s->nb_list;
s->nb_list - nb;
----

*BUG*: This is stored into the local store created by the module state passed
into this function.  Adding in the missing annotation should clean this up.


Store (486)
^^^^^^^^^^^

----
pkt - (tr_beacon_t*)ker_malloc(pkt_size, TREE_ROUTING_PID);
if(pkt -- NULL) return;
...
post_net(TREE_ROUTING_PID, 
        TREE_ROUTING_PID, 
        MSG_BEACON_PKT, 
        pkt_size, pkt, 
        SOS_MSG_RELEASE, 
        BCAST_ADDRESS);
----

*BUG*: Not sure why this was not caught.

////////////////////////////////////////
////////////////////////////////////////

2005_12_16_16_25_18
~~~~~~~~~~~~~~~~~~~

----
tr_hdr_t *hdr - (tr_hdr_t*) ker_msg_take_data(TREE_ROUTING_PID, msg);
if(hdr -- NULL) return -ENOMEM;
...
post_long(hdr->dst_pid, 
        TREE_ROUTING_PID, 
        MSG_TR_DATA_PKT, 
        msg_len, hdr, 	
        SOS_MSG_RELEASE);
----

*BUG*: Not sure why this was not caught.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

tree_routing_test
-----------------

////////////////////////////////////////
////////////////////////////////////////

2006_08_04_02_05_14
~~~~~~~~~~~~~~~~~~~

Store (116)
^^^^^^^^^^^

----
payload - sys_msg_take_data(msg);
sys_post_uart(TR_TEST_PID, msg->type, msg_len, payload, SOS_MSG_RELEASE, BCAST_ADDRESS);
----

*BUG*: Not sure why this was not caught.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

uart_speed
----------

////////////////////////////////////////
////////////////////////////////////////

2006_02_16_10_13_17
~~~~~~~~~~~~~~~~~~~

Store (108)
^^^^^^^^^^^

----
s->msgPtrs[i] - ker_malloc(MSG_LEN, UART_SPEED_ID);
----

*BUG*: This is stored into the local store created by the module state passed
into this function.  Adding in the missing annotation should clean this up.


