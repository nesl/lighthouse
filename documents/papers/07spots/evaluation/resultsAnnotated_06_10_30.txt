////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

Summary of Memory Usage in SOS:
-------------------------------

ker_malloc: 603

blk_mem_alloc: 6

ker_free: 372

blk_mem_free: 6

post_long: 958   

post_link: 284    

post_auto: 76    

post_net: 620    

post_uart: 182    

post_i2c: 91    

post_spi: 87    

ker_msg_take_data: 608    

msg_duplicate: 0       

msg_create: 0       

handle_incoming_msg: 0       

sched_msg_alloc: 10      

mq_enqueue: 0       

ker_cam_add: 0       

msg_dispatch: 0       

pop_new_mod_op: 0       

ker_change_own: 368    

sys_msg_take_data: 139    

fetcher_restart: 30     

sos_msg_dispatch: 0       

total: 4440


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

cdriver
-------

2006_01_18_01_39_54
~~~~~~~~~~~~~~~~~~~

Compiler
^^^^^^^^

----
2006_01_18_01_39_54: cdriver.c:91: Error: Cannot resolve variable LED_AMBER_TOGGLE.
2006_01_18_01_39_54: error in doExp (Errormsg.Error)
----


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

daq_system
----------

2006_02_05_05_58_11
~~~~~~~~~~~~~~~~~~~

Compiler
^^^^^^^^

----
daq_system.c:97: Error: Cannot resolve variable ADC_PORT0.
error in doExp (Errormsg.Error)
...
----


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

dft_loader
----------

2006_02_25_06_29_55
~~~~~~~~~~~~~~~~~~~

*TODO*: Store problem at line 255 from version 2006_02_07_05_06_10 is gone,
but the code remains nearly identical.  What is up with that?


2006_02_16_10_13_16
~~~~~~~~~~~~~~~~~~~

Compiler
^^^^^^^^

----
old type = TFun(TNamed(int8_t, TInt(signed char, ), ),
...
new type = TFun(TNamed(int8_t, TInt(signed char, ), ),
...
----

2006_02_07_05_06_10
~~~~~~~~~~~~~~~~~~~

Dead (254)
^^^^^^^^^^
----
ker_free(st.version_data);
st.version_data = (msg_version_data_t*) ker_msg_take_data(KER_DFT_LOADER_PID, msg);
----

----
#line 256
    __cil_tmp59 = (unsigned int )(& st) + 84;
#line 256
    __cil_tmp60 = (*((msg_version_data_t **)__cil_tmp59));
#line 256
    __cil_tmp61 = (void *)__cil_tmp60;
#line 256
    ker_free(__cil_tmp61);
#line 257
    __cil_tmp62 = (unsigned int )(& st) + 84;
#line 257
    (*((msg_version_data_t **)__cil_tmp62)) = (msg_version_data_t *)ker_msg_take_data((unsigned char)17,
                                                                                      msg);
----

This is a may alias problem.  We free something that may alias `&st` and then
something that may alias that same `&st` appears on the right hand side of a
SET expression.

*TODO*: This is probably caused by may alias problems.  Not much we can do to
fix it.

Store (272)
^^^^^^^^^^^

----
fetcher_state_t *f = (fetcher_state_t*)
    ker_msg_take_data(KER_DFT_LOADER_PID, msg);

if (f == NULL) return -ENOMEM;

if(is_fetcher_succeed(f)) {
----

expands to:

----
#line 274
  tmp = (fetcher_state_t *)ker_msg_take_data((unsigned char)17, msg);
#line 274
  f = tmp;
  } 
  {
  {
#line 277
  __cil_tmp8 = (void *)0;
#line 277 
  __cil_tmp9 = (unsigned int )__cil_tmp8;
#line 277 
  __cil_tmp10 = (unsigned int )f;
  } 
#line 277 
  if (__cil_tmp10 == __cil_tmp9) {
#line 277
    return ((signed char)-12);
  }
  }
  {
#line 279
  tmp___2 = is_fetcher_succeed(f);
  }
#line 279
  if (tmp___2) {
    {
#line 287
    tmp___0 = fetcher_get_requested_version(f);
#line 287
    tmp___1 = fetcher_get_requested_pid(f);
#line 287
    codemem_unload_module_not_version(tmp___1, tmp___0);
#line 290
    fetcher_commit(f, 1);
#line 291
    __cil_tmp11 = (void *)f;
#line 291
    ker_free(__cil_tmp11);
----

See description of store problems below in module dated `2005_10_16_19_35_34`.

*TODO*: We could change the assumption about equivalency updates to variables
passed to functions.  If we change this assumption, we will still need to add
annotations to the `fetcher_commit` and `fetcher_restart` functions.


2005_10_16_19_35_34
~~~~~~~~~~~~~~~~~~~

Store (52)
^^^^^^^^^^
----
fetcher_state_t *f = (fetcher_state_t*)
    ker_msg_take_data(KER_DFT_LOADER_PID, msg);
    if(is_fetcher_succeed(f)) {
        ker_led(LED_GREEN_TOGGLE);
        DEBUG("Fetch successful!\n");
#ifndef SOS_GW
        mod_header_ptr mod = ker_codemem_get_header_address(
                fetcher_get_requested_pid(f),
                fetcher_get_requested_version(f));
        DEBUG("mod = 0x%x\n",mod);
        ker_register_module(mod);
#endif
        fetcher_commit(f, true);
        return SOS_OK;
    } else {
        ker_led(LED_RED_TOGGLE);
        DEBUG("Fetch failedl!\n");
        fetcher_restart(f, BCAST_ADDRESS);
        //fetcher_commit(f, false);
        return SOS_OK;
    }
----

This transitions to:

----
#line 52
          tmp = (fetcher_state_t *)ker_msg_take_data((unsigned char)18, msg);
#line 52
          f = tmp;
#line 54
          tmp___3 = is_fetcher_succeed(f);
----

The problem arrises from the call to `is_fetcher_succeed`.  The analysis
conservativly assumes that the `is_equiv` information for a variable is lost
when that variable is passed as a formal to a function.  Thus, the call to
`is_fetcher_succeed` severs the tie between `f` and the heap data referenced
by `tmp`.

*TODO*: We could change the assumption about equivalency updates to variables
passed to functions.  If we change this assumption, we will still need to add
annotations to the `fetcher_commit` and `fetcher_restart` functions.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

digital_adc
-----------

2006_07_18_20_36_12
~~~~~~~~~~~~~~~~~~~

Store (121)
^^^^^^^^^^^

----
case ADS_POWER_ON:
{
    uint8_t* power_mask = ker_msg_take_data(ADS7828_ID, msg);

    HAS_CRITICAL_SECTION;
    ENTER_CRITICAL_SECTION();
    ADS7828_DIRECTION = ADS7828_DIRECTION | *power_mask;
    ADS7828_PORT = ADS7828_PORT | *power_mask;
    LEAVE_CRITICAL_SECTION();

    break;
}
----

*REAL BUG*: User fails to free data taken with call to `ker_msg_take_data`.


Store (159)
^^^^^^^^^^^

----
s->command = (uint8_t *)ker_malloc(1, ADS7828_ID);
----

Need to add annotation for local store `s`.  After adding this annotation the
problem false positive disapeers.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

ds2438
------

2006_07_17_23_21_38
~~~~~~~~~~~~~~~~~~~

Store (538)
^^^^^^^^^^^

----
data = (uint8_t *)ker_malloc(9, DS2438_ID);
if(ds2438_read_scratch_page(SP_00, data, 9) != SOS_OK) {
    return -EBUSY;
}

post_long(msg->sid, 
        DS2438_ID, 
        DS2438_CONFIG, 
        9, 
        data, 
        SOS_MSG_RELEASE);
----

*REAL BUG*: Error condition causes a return before buffer is freed.


Store (561)
^^^^^^^^^^^

----
data = (uint8_t *)ker_malloc(9, DS2438_ID);
if(ds2438_read_scratch_page(SP_07, data, 9) != SOS_OK) {
    return -EBUSY;
}

post_long(msg->sid, 
        DS2438_ID, 
        DS2438_ACCUM, 
        9, 
        data, 
        SOS_MSG_RELEASE);
----

*REAL BUG*: Exact same bug as that above.  Probably copy and paste.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

echo_uart
---------

2006_01_24_04_14_00
~~~~~~~~~~~~~~~~~~~

Store (66)
^^^^^^^^^^

Current value of the SOS_MSG_RELEASE flag is 0x04.  This version of
code is using 0x10.  The current value of SOS_MSG_RELEASE is hard coded into
the checker.  Changing the define to reflect the current constent fixes this problem.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

flooding
--------

2005_12_16_16_26_02
~~~~~~~~~~~~~~~~~~~

Store (80, 90)
^^^^^^^^^^^^^^

Current value of the SOS_MSG_RELEASE flag is 0x04.  This version of code is
using 0x10.  The current value of SOS_MSG_RELEASE is hard coded into the
checker.  Changing the define to reflect the current constent fixes both of
these problems.


Store (165)
^^^^^^^^^^^
  
----
ker_change_own(pktpayload, MOD_FLOODING_PID);
return post_net(MOD_FLOODING_PID, MOD_FLOODING_PID, 
        MSG_FLOOD_DATA_PKT, payloadlen, pktpayload, 
        SOS_MSG_RELEASE, BCAST_ADDRESS);
----

expands to:

----
#line 165
  __cil_tmp34 = (void *)pktpayload;
#line 165
  ker_change_own(__cil_tmp34, (unsigned char)140);
#line 166
  __cil_tmp35 = (void *)pktpayload;
#line 166
  tmp___0 = post_net((unsigned char)140, (unsigned char)140, (unsigned char)32, payloadlen,
                     __cil_tmp35, (unsigned char)4, 65535U);
----

The problem here arises from `ker_change_own`.  As noted above, the analysis
conservativly assumes that the `is_equiv` information for a variable is lost
when that variable is passed as a formal to a function.  This severs the
relation between the dynamic data stored into `__cil_tmp34` and `pktpayload`.

*TODO*: We could change the assumption about equivalency updates to variables
passed to functions.  


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

fnclient
--------

2006_03_14_00_32_19
~~~~~~~~~~~~~~~~~~~

Compiler
^^^^^^^^

----
2006_03_14_00_32_19: ../../../kernel/include/sos_info.h[72:0-0] : syntax error
2006_03_14_00_32_19: Parsing error
2006_03_14_00_32_19: Fatal error: exception Frontc.ParseError("Parse error")
----

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

i2c_comm_ping_pong
------------------

2006_02_20_00_18_43
~~~~~~~~~~~~~~~~~~~

Store (114, 121)
^^^^^^^^^^^^^^^^

----
if ((s->sos_i2c_msg = ker_malloc(sizeof(Message), s->pid)) != NULL) {
----
					
and:

----
if ((s->sos_i2c_msg->data = ker_malloc(s->msg_len,s->pid)) != NULL) {
----

Need to add annotation for local store `s`.  After adding this annotation the
problem false positive disapeers.

Dead (132)
^^^^^^^^^^

----
if (...) {
    ...
    if (...) {
        ...
    } else {
        LED_DBG(LED_RED_TOGGLE);
        ker_free(s->sos_i2c_msg);
    }
} else {
    LED_DBG(LED_RED_TOGGLE);
}
s->state = T_I2C_COMM_SEND_SOS_I2C_MSG;
----

This is a may alias problem.  We free something that may alias `s` and then
something that may alias that same `s` appears on the right hand side of a
SET expression.

*TODO*: This is probably caused by may alias problems.  Not much we can do to
fix it.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////


i2c_comm_tx
-----------

2006_02_20_00_18_43
~~~~~~~~~~~~~~~~~~~

Store (127, 134)
^^^^^^^^^^^^^^^^

----
if ((s->sos_i2c_msg = ker_malloc(sizeof(Message), s->pid)) != NULL) {
----

and:
						
----
if ((s->sos_i2c_msg->data = ker_malloc(s->msg_len,s->pid)) != NULL) {
----

Need to add annotation for local store `s`.  After adding this annotation the
problem false positive disapeers.

Dead (145, 191, 254)
^^^^^^^^^^^^^^^^^^^^

----
if (...) {
    ...
    if (...) {
        ...
    } else {
        LED_DBG(LED_RED_TOGGLE);
        ker_free(s->sos_i2c_msg);
    }
} else {
    LED_DBG(LED_RED_TOGGLE);
}
s->state = T_I2C_COMM_SEND_SOS_I2C_MSG;
----

and:

----
case MSG_I2C_SEND_DONE:
{
    ker_free(msg->data);
    ker_i2c_release_bus(s->pid);
    if (s->state == T_I2C_COMM_SEND_RAW) {
        s->state = T_I2C_COMM_SEND_RAW_DONE;
    } else {
        s->state = T_I2C_COMM_SEND_SOS_MSG_DONE;
    }
    break;
}
----

and:

----
case MSG_ERROR:
{
    LED_DBG(LED_GREEN_OFF);
    LED_DBG(LED_YELLOW_ON);

    ker_free(msg->data);
    ker_i2c_release_bus(s->pid);
    break;
}
----

*TODO*: This is probably caused by may alias problems.  Not much we can do to
fix it.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

mag_sensor
----------

2006_08_30_23_09_58
~~~~~~~~~~~~~~~~~~~

store (94, 191)
^^^^^^^^^^^^^^^

----
magnet_sensor_state_t *s = (magnet_sensor_state_t*) ker_get_module_state(MAG_SENSOR_PID);
...
s->i2c_data_ptr = ker_malloc(sizeof(uint16_t), MAG_SENSOR_PID);
----

and:

----
magnet_sensor_state_t *s = (magnet_sensor_state_t*) ker_get_module_state(MAG_SENSOR_PID);
...
(s->i2c_data_ptr) = ker_malloc(sizeof(uint16_t), MAG_SENSOR_PID);
----

The function `ker_get_module_state` returns a pointer to the specified
module's persistent state.  In a sense, it dynamically creates a store.  We
could create a new annotation for functions that create stores.  However, for
this analysis I simply annotated the `s` variable as being a local store to
generate the same effect.  This fixes the false positives above.

*TODO*: Need annotation for the dynamic creation of a store.


dead (302)
^^^^^^^^^^

----
(s->i2c_data_ptr) = ker_malloc(sizeof(uint16_t), MAG_SENSOR_PID);
if(x_or_y == 0) {
    s->current_axis = 0;
    *(s->i2c_data_ptr) = 0x0000 | ((s->i2c_data_value)<<8);
}
else if(x_or_y == 1){
    s->current_axis = 1;
    *(s->i2c_data_ptr) = 0x0080 | ((s->i2c_data_value)<<8);
}
else {
    return -EINVAL;
}
----

expands to:

----
#line 302
__cil_tmp18 = (unsigned int )s;
#line 302
__cil_tmp19 = __cil_tmp18 + 8;
#line 302
__cil_tmp20 = (*((uint16_t **)__cil_tmp19));
#line 302
__cil_tmp21 = (void *)__cil_tmp20;
#line 302
ker_free(__cil_tmp21);
#line 304
ker_i2c_release_bus((unsigned char)132);
    {
#line 306
        __cil_tmp22 = (unsigned int )s;
#line 306
        __cil_tmp23 = __cil_tmp22 + 15;
#line 306
        __cil_tmp24 = (*((uint8_t *)__cil_tmp23));
#line 306
        __cil_tmp25 = (int )__cil_tmp24;
    }
#line 306
    if (__cil_tmp25 == 0) {
----

This is a may alias problem.  We free something that may alias `s` and then
something that may alias that same `s` appears on the right hand side of a
SET expression.

*TODO*: This is probably caused by may alias problems.  Not much we can do to
fix it.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

mag_test_app
------------

2006_08_30_23_09_58
~~~~~~~~~~~~~~~~~~~

Store (79, 88)
^^^^^^^^^^^^^^

----
temp = ker_malloc(sizeof(uint8_t), MAG_TEST_PID);
*temp = 0;
ker_sensor_control(s->pid, MTS310_MAG_0_SID, temp);	
s->state = MAG_TEST_APP_IDLE_0;
break;
----

and:

----
temp = ker_malloc(sizeof(uint8_t), MAG_TEST_PID);
*temp = 1;
ker_sensor_control(s->pid, MTS310_MAG_1_SID, temp);	
s->state = MAG_TEST_APP_IDLE_1;
break;
----

Function `ker_sensor_control` was not annotated.  Adding this annotation
eliminates the warnings above, and noted that `ker_sensor_control` does not
properly store / release incoming data.

*REAL BUG*: Code in module is safe, but the function `ker_sensor_control` fails
to store / release incoming data.

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

rats
----

2006_03_29_19_29_21
~~~~~~~~~~~~~~~~~~~

Store (452, 455, 456) 
^^^^^^^^^^^^^^^^^^^^^

----
s->ts_list = (timesync_t *)ker_malloc(sizeof(timesync_t), s->pid);
----

and:

----
s->ts_list->timestamps = (uint32_t *)ker_malloc(BUFFER_SIZE*sizeof(uint32_t), s->pid);
----

and:

----
s->ts_list->my_time = (uint32_t *)ker_malloc(BUFFER_SIZE*sizeof(uint32_t), s->pid);
----

Need to add annotation for local store `s`.  After adding this annotation the
problem false positive disapeers.


Store (576, 580, 581)
^^^^^^^^^^^^^^^^^^^^^

----
ts_list_ptr = s->ts_list;
...
ts_list_ptr->next = (timesync_t *)ker_malloc(sizeof(timesync_t), s->pid);
----

and:

----
ts_list_ptr - s->ts_list;
...
ts_list_ptr->timestamps - (uint32_t *)ker_malloc(BUFFER_SIZE*sizeof(uint32_t), s->pid);
----

and:

----
ts_list_ptr - s->ts_list;
...
ts_list_ptr->my_time - (uint32_t *)ker_malloc(BUFFER_SIZE*sizeof(uint32_t), s->pid);
----

These three are stored onto a linked list.  While the head of the linked list
is realated to the store `s`, iterations through the linked list cause this
information to be lost before the `ker_malloc` calls listed above.

*TODO*: Not too much we can do with linked data structures.

Store (497, 498)
^^^^^^^^^^^^^^^^

----
float *buffer = (float *)ker_malloc(8*sizeof(float), s->pid);
...
post_net(s->pid, s->pid, MSG_DEBUG3, 8*sizeof(float), buffer, SOS_MSG_RELEASE, ROOT_NODE);
----

and:

----
float *buffer2 = (float *)ker_malloc(8*sizeof(float), s->pid);
...
post_net(s->pid, s->pid, MSG_DEBUG3, 8*sizeof(float), buffer2, SOS_MSG_RELEASE, ROOT_NODE);
----

The problem arrises from an intervening function call that passes in both
`buffer` and `buffer2` as formals.  The analysis conservativly assumes that
the `is_equiv` information for a variable is lost when that variable is passed
as a formal to a function.

*TODO*: We could change the assumption about equivalency updates to variables
passed to functions.  

///////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

surge
-----

2005_10_16_19_35_34
~~~~~~~~~~~~~~~~~~~

Store (205)
^^^^^^^^^^^

Current value of the SOS_MSG_RELEASE flag is 0x04.  This version of
code is using 0x10.  The current value of SOS_MSG_RELEASE is hard coded into
the checker.  Changing the define to reflect the current constent fixes this problem.

2005_09_02_05_38_33
~~~~~~~~~~~~~~~~~~~

Store (166)
^^^^^^^^^^^

Current value of the SOS_MSG_RELEASE flag is 0x04.  This version of
code is using 0x10.  The current value of SOS_MSG_RELEASE is hard coded into
the checker.  Changing the define to reflect the current constent fixes this problem.

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

test_i2c_comm_rx
----------------

2006_02_16_10_13_17
~~~~~~~~~~~~~~~~~~~

Compiler
^^^^^^^^

----
old type = TFun(TNamed(int8_t, TInt(signed char, ), ),
...
new type = TFun(TNamed(int8_t, TInt(signed char, ), ),
...
----

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

test_taophotosensor
-------------------

2005_11_17_12_24_15
~~~~~~~~~~~~~~~~~~~~

Store (99, 121)
^^^^^^^^^^^^^^^

----
buff = ker_malloc(sizeof(test_taosphotosensor_t), DFLT_APP_ID0);
if (buff != NULL) {
    memcpy(buff, s, sizeof(test_taosphotosensor_t));
    post_net(DFLT_APP_ID0, DFLT_APP_ID0, TAOS_PHOTOSENSOR_DATA, sizeof(test_taosphotosensor_t), buff, SOS_MSG_RELEASE, BCAST_ADDRESS);
    ker_led(LED_GREEN_TOGGLE);
}
----

and:

----
buff = ker_malloc(sizeof(test_taosphotosensor_t), DFLT_APP_ID0);
if (buff != NULL){
    memcpy(buff, s, sizeof(test_taosphotosensor_t));
    post_net(DFLT_APP_ID0, DFLT_APP_ID0, TAOS_PHOTOSENSOR_DATA, sizeof(test_taosphotosensor_t), buff, SOS_MSG_RELEASE, BCAST_ADDRESS);
}
----

expands to:

----
buff = (uint8_t *)ker_malloc(4U, (unsigned char)128);
{
#line 100
    __cil_tmp30 = (void *)0;
#line 100
    __cil_tmp31 = (unsigned int )__cil_tmp30;
#line 100
    __cil_tmp32 = (unsigned int )buff;
}
#line 100
if (__cil_tmp32 != __cil_tmp31) {
    {
#line 101
        memcpy(buff, s, 4U);
#line 102
        __cil_tmp33 = (unsigned char )4U;
#line 102
        __cil_tmp34 = (void *)buff;
#line 102
        post_net((unsigned char)128, (unsigned char)128, (unsigned char)32,
                __cil_tmp33, __cil_tmp34, (unsigned char)4, 65535U);
#line 103
        ker_led((unsigned char)8);
    }
}
----

The current value of the SOS_MSG_RELEASE flag is 0x04.  This version of code
is using 0x10.  The current value of SOS_MSG_RELEASE is hard coded into the
checker.  Changing this fixes the above false positive.

*TODO*: However, given the expansion listed above, I am suprised that the call
to `memcpy` is not causing problems.  I would think (as described above) that
passing `buff` as an lval to this function would remove the is equivalent
state for `buff`.  This would cause the `post_net` to fail to see the
relationship between `buff` and the heap data.  Understand this!


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

test_tpsn
---------

2006_03_20_10_18_35
~~~~~~~~~~~~~~~~~~~

Store (86)
^^^^^^^^^^

----
s->tpsn_ptr = (tpsn_t *)ker_malloc(sizeof(tpsn_t), s->pid);
----

Need to add annotation for local store `s`.  After adding this annotation the
problem false positive disapeers.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

test_uart_comm_tx
-----------------

2006_02_02_05_12_45
~~~~~~~~~~~~~~~~~~~

Store (125, 131)
^^^^^^^^^^^^^^^^
					
----
if ((s->sos_uart_msg = ker_malloc(sizeof(Message), s->pid)) != NULL) {
----

and:

----
if ((s->sos_uart_msg->data = ker_malloc(s->msg_len,s->pid)) != NULL) {
----

Need to add annotation for local store `s`.  After adding this annotation the
problem false positive disapeers.

Dead (142, 186, 201)
^^^^^^^^^^^^^^^^^^^^

----
if (...) {
    ...
        if (...) {
            ...
        } else {
            LED_DBG(LED_RED_TOGGLE);
            ker_free(s->sos_uart_msg);
        }
} else {
    LED_DBG(LED_RED_TOGGLE);
}
s->state = T_UART_COMM_SEND_SOS_UART_MSG;
----

and:

----
case MSG_UART_SEND_DONE:
{
    ker_free(msg->data);
    ker_uart_release_bus(s->pid);
    if (s->state == T_UART_COMM_SEND_RAW) {
        s->state = T_UART_COMM_SEND_RAW_DONE;
    } else {
        s->state = T_UART_COMM_SEND_SOS_MSG_DONE;
    }
    break;
}
----

and:

----
case MSG_ERROR:
{
    LED_DBG(LED_GREEN_OFF);
    LED_DBG(LED_YELLOW_ON);

    ker_free(msg->data);
    ker_uart_release_bus(s->pid);
    break;
}
----

*TODO*: This is probably caused by may alias problems.  Not much we can do to
fix it.

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

tpsn
----

2006_03_20_10_17_13
~~~~~~~~~~~~~~~~~~~

Compile
^^^^^^^

----
tpsn.c:246: Bug: typeOffset: Field on a non-compound
Fatal error: exception Errormsg.Error
----

////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////


tree_routing
------------

2006_10_14_00_34_59
~~~~~~~~~~~~~~~~~~~

Store (557)
^^^^^^^^^^^
----
uint8_t msg_len = msg->len;
tr_hdr_t *hdr = (tr_hdr_t*)
    ker_msg_take_data(TREE_ROUTING_PID, msg);
    bool dup;
    uint16_t my_id = ker_id();
    if(hdr == NULL) return -ENOMEM;

    if(s->gpCurrentParent == NULL) {
        if(my_id == entohs(hdr->originaddr)) {
            hdr->seqno = ehtons(s->gCurrentSeqNo++);                    
            hdr->hopcount = s->gbCurrentHopCount;
            //DEBUG("<SEND> Data, seq = %d\n", hdr->seqno);
            post_net(TREE_ROUTING_PID, TREE_ROUTING_PID,
                    MSG_TR_DATA_PKT, msg_len, hdr,     
                    SOS_MSG_RELEASE, BCAST_ADDRESS);
            DEBUG_PID(TREE_ROUTING_PID, "No parent - Broadcasting data from local node\n");
            return SOS_OK;  
        } else {
            sys_free(hdr);
            return -EINVAL;
        }
    } 

if(s->gbCurrentHopCount >= hdr->hopcount) {
    //Possible cycle??
    sys_free(hdr);
    return -EINVAL;
}

if(my_id != entohs(hdr->originaddr)) {
    update_neighbor(s, msg->saddr, entohs(hdr->seqno), &dup);
} else {
    dup = false;
}

if(dup == false) {
    hdr->hopcount = s->gbCurrentHopCount;
    if(my_id != entohs(hdr->originaddr)){
        hdr->seqno = ehtons(s->gCurrentSeqNo++); 
    } else {
        hdr->seqno = ehtons(s->gCurrentSeqNo); 
    }
    post_net(TREE_ROUTING_PID, TREE_ROUTING_PID,
            MSG_TR_DATA_PKT, msg_len, hdr,     
            SOS_MSG_RELEASE, s->gpCurrentParent->id);
    DEBUG_PID(TREE_ROUTING_PID, "Forward data: %d <-- %d, orig(%d)\n", 
            s->gpCurrentParent->id, node_address, entohs(hdr->originaddr));
    return SOS_OK;		
} else {
    sys_free(hdr);
    return -EINVAL;
} 
----

Missing the annotation for `sys_free`.  Adding in the annotation fixes this
false positive.  Pretty complex code to think over!  Note the bug in the
similar code below.

2005_10_16_19_35_34
~~~~~~~~~~~~~~~~~~~

Store (212, 536)
^^^^^^^^^^^^^^^^

----
tr_hdr_t *hdr = (tr_hdr_t*)
    ker_msg_take_data(TREE_ROUTING_PID, msg);
if(hdr == NULL) return -ENOMEM;
bool dup;
if(msg->saddr != my_id){
    update_neighbor(s, msg->saddr, entohs(hdr->seqno), &dup);
}
DEBUG("<TR> src = %d, hop = %d\n", 
        entohs(hdr->originaddr),
        hdr->originhopcount);
post_long(hdr->dst_pid, TREE_ROUTING_PID, 
        MSG_TR_DATA_PKT, msg->len, msg->data, 	
        SOS_MSG_RELEASE);
----

and:

----
static int8_t tr_send_data(tree_route_state_t *s, Message *msg)
{
    tr_hdr_t *hdr = (tr_hdr_t*)
        ker_msg_take_data(TREE_ROUTING_PID, msg);
    bool dup;
    uint16_t my_id = ker_id();
    if(hdr == NULL) return -ENOMEM;

    if(s->gpCurrentParent == NULL) {
        if(my_id == entohs(hdr->originaddr)) {
            hdr->seqno = ehtons(s->gCurrentSeqNo++);                    
            hdr->hopcount = s->gbCurrentHopCount;
            //DEBUG("<SEND> Data, seq = %d\n", hdr->seqno);
            post_net(TREE_ROUTING_PID, TREE_ROUTING_PID,
                    MSG_TR_DATA_PKT, msg->len, msg->data,     
                    SOS_MSG_RELEASE, BCAST_ADDRESS);
            DEBUG("<TR> No parent - Broadcasting data from local node\n");
            return SOS_OK;  
        } else {
            ker_free(hdr);
            return -EINVAL;
        }
    } 
    if(s->gbCurrentHopCount >= hdr->hopcount) {
        //Possible cycle??
        ker_free(hdr);
        return -EINVAL;
    }
    if(my_id != entohs(hdr->originaddr)) {
        update_neighbor(s, msg->saddr, entohs(hdr->seqno), &dup);
    } else {
        dup = false;
    }
    if(dup == false) {
        hdr->hopcount = s->gbCurrentHopCount;
        if(my_id != entohs(hdr->originaddr)){
            hdr->seqno = ehtons(s->gCurrentSeqNo++); 
        } else {
            hdr->seqno = ehtons(s->gCurrentSeqNo); 
        }
        post_net(TREE_ROUTING_PID, TREE_ROUTING_PID,
                MSG_TR_DATA_PKT, msg->len, msg->data,     
                SOS_MSG_RELEASE, s->gpCurrentParent->id);
        DEBUG("<TR> Forward data: %d <-- %d, orig(%d)\n", 
                s->gpCurrentParent->id, node_address, entohs(hdr->originaddr));
        return SOS_OK;		
    } else {
        ker_free(hdr);
        return -EINVAL;
    }
}
----

*REAL BUG*: Heap data stored into `hdr` fails to be freed.  This is due to the
programmer incorrectly using `ker_msg_take_data` and attempting to use
`msg->data` directly.


2005_09_02_04_03_40
~~~~~~~~~~~~~~~~~~~

Store (132)
^^^^^^^^^^^		

----
neighbor_entry_t *nb = (neighbor_entry_t*) 
    ker_malloc(sizeof(neighbor_entry_t),TREE_ROUTING_PID);
if(nb != NULL) {
    init_nb(nb, ker_id());
    nb->parent = ker_id();
    nb->flags = NBRFLAG_VALID;
    nb->hop = 0;
    s->gpCurrentParent = nb;      
    s->gbCurrentHopCount = 0;	
} else {
    DEBUG("NO Memory for tree routing!!!\n");
}
----

*REAL BUG*: User fails to free data in the `else` clause.


Store (389)
^^^^^^^^^^^

----
nb = (neighbor_entry_t*) ker_malloc(sizeof(neighbor_entry_t), TREE_ROUTING_PID);
----

Need to add annotation for local store `nb`.  After adding this annotation the
problem false positive disapeers.


Store (464)
^^^^^^^^^^^

Current value of the SOS_MSG_RELEASE flag is 0x04.  This version of
code is using 0x10.  The current value of SOS_MSG_RELEASE is hard coded into
the checker.  Changing the define to reflect the current constent fixes this problem.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////


tree_routing_test
-----------------

2006_08_04_02_05_14
~~~~~~~~~~~~~~~~~~~

Store (116)
^^^^^^^^^^^

----
payload = sys_msg_take_data(msg);
sys_post_uart(TR_TEST_PID, msg->type, msg_len, payload, SOS_MSG_RELEASE, BCAST_ADDRESS);
----

The `sys_post_*` API is not currently handled in the checker.  Changing this
to the (nearly) identical `post_*` API will fix this problem.


////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////

uart_speed
----------

2006_02_16_10_13_17
~~~~~~~~~~~~~~~~~~~

Store (108)
^^^^^^^^^^^

----
s->msgPtrs[i] = ker_malloc(MSG_LEN, UART_SPEED_ID);
----

Need to add annotation for local store `s`.  After adding this annotation the
problem false positive disapeers.



