
Introduction
------------


Background
~~~~~~~~~~

1. Exciting application domain using modular, event based, embedded systems

2. Most software in the domain is not hardened unlike some other embedded
systems domains

3. Create a suite of tools to help researchers and students better
accomplish the task of writing code and move onto their actual
experimentation


Goals
~~~~~

- Provide developers with tools to create more stable sensor network systems
  by reducing resource misuse and increasing protocol awareness

- Trying to reason about C in all of its evil pointer glory
    - Limited in our ability to reason about pointers
    - Complex data structures make analysis a pain

- Minimize runtime overhead


Contributions
~~~~~~~~~~~~~

Research
^^^^^^^^

- Demonstrate change of precision from using hybrid static / dynamic
  checking
    - Problems found using static checking
    - Problems found using dynamic checking
    - Problems found using both
    
- New ownership type system

- Minimal set of properties from "calculus of capabilities"

Practical
^^^^^^^^^

- Design methodology and suit of tools for examining modular, reactive,
  and embedded systems with (respect to resource ownership)



Sensor Network OS Background
----------------------------


Assumptions
~~~~~~~~~~~

- Modular testing is desirable (as opposed to full program analysis)
    - Users may not have access to the full system at build time
    - Able to avoid some scaling problems

- Event based system where incoming events may arrive in a non-deterministic
  order
    - Protocols may exist but we do not know this to be true statically

- Embedded system with no MMU 
    - Why focus on dynamic memory?
    - Other dynamic resources?
    - Do resource constraints matter?



Abstract OS?
~~~~~~~~~~~~

- Introduce TinyOS and SOS for running examples

- Describe a very simple "ideal" OS that will be used for the rest of this
  paper

- Map the abstract OS onto TinyOS and SOS
    - Global state
    - Component local state
    - Event handlers
    - Calls to functions
    - Messaging
    - Component composition



Proposed Design Process
-----------------------


Specification
~~~~~~~~~~~~~

- Write a protocol level specification for the program in state machine form
    - Edges represent transitions caused by handling events
    - States represent protocol state and global state of resources
    - Perform basic sanity check on state machine


Static Analysis
~~~~~~~~~~~~~~~

- Static analysis verifies the underlying source code corresponding to
  specification
    - Resource pre- and post- conditions pulled from specification
    - Assume that other access to resources are forbidden
    - Provide compile time feedback to systems users


Runtime Monitoring
~~~~~~~~~~~~~~~~~~

- Generate runtime code to monitor state transitions in deployed code
    - Basic FSM embedded in system
    - Call into FSM when state transitions occur
    - How best to embedded these in source (especially when they are not
      tied directly to functions, but to paths through functions)?
    - How to minimize the overhead of these checks?  Perhaps through static
      analysis?
    - How to handle runtime errors?
    


Motivating Example
------------------

- Faulty TinyOS application from CS113?



Evaluation
----------

Micro
~~~~~

- Types of bugs caught static and runtime analysis to show what they can do
- Numbers of bugs from collection of tests on SOS?


Macro
~~~~~

- Practical experience using this to examine the RATS time synchronization
  protocol in SOS?



Related Work
------------

- Good engineering

- Static verification

- Analysis and sensor networks



Future Work
-----------

- Nope :-)

